/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
apply plugin: 'com.android.application'

repositories {
    maven {
        url "https://mint.splunk.com/gradle/"
    }
    maven {
        url 'https://maven.google.com/'
        name 'Google'
    }
}

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        applicationId "org.wso2.iot.agent"
        minSdkVersion 17
        targetSdkVersion 27
        multiDexEnabled true

        versionCode 3010031
        versionName "3.1.31"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // FIRMWARE_UPGRADE_RETRY_COUNT: How many time the agent must retry if firmware upgrade
        // fails.
        buildConfigField("int", "FIRMWARE_UPGRADE_RETRY_COUNT", "0")
        // ALLOW_SYSTEM_APPS_IN_APPS_LIST_RESPONSE: Setting this to true will make the
        // App list response to the service to include system apps as well.
        buildConfigField("boolean", "ALLOW_SYSTEM_APPS_IN_APPS_LIST_RESPONSE", "false")
        // HIDE_UNREGISTER_BUTTON: Hide the unregister button after enrollment so that  the
        // unenrollment can only be done remotely.
        buildConfigField("boolean", "HIDE_UNREGISTER_BUTTON", "false")
        // COSU related configurations.
        // ALLOW_MULTIPLE_APPS_IN_COSU_MODE: Set to true to make all installed app in COSU mode
        // accessible; if false only the last installation will be accessible.
        buildConfigField("boolean", "ALLOW_MULTIPLE_APPS_IN_COSU_MODE", "true")
        // By enabling this button, data wipe can be performed on a device without having to
        // issue a remote wipe operation.
        buildConfigField("boolean", "DISPLAY_WIPE_DEVICE_BUTTON", "true")
        buildConfigField("String", "EULA_TITLE", "\"POLICY AGREEMENT\"")

        // Build and flavor independent configurations
        //API version that supported by the server
        buildConfigField("float", "SERVER_API_VERSION", "1.0f")
        //Minimum Server API version that supported by the agent app
        buildConfigField("float", "MIN_SERVER_API_VERSION", "1.0f")
        //Maximum Server API version that supported by the agent app
        buildConfigField("float", "MAX_SERVER_API_VERSION", "1.0f")
        // AGENT_PACKAGE: If a modification of the agent's package name is done, this must be
        // altered
        buildConfigField("String", "AGENT_PACKAGE", "\"org.wso2.iot.agent\"")
        // CATALOG_APP_PACKAGE_NAME: If a modification of the catalog apps's package
        // name is done, this must be altered.
        buildConfigField("String", "CATALOG_APP_PACKAGE_NAME", "\"org.wso2.app.catalog\"")
        // SYSTEM_SERVICE_PACKAGE: If system service app is in use, the package name of it is
        // defined here so that the agent knows the package name of the system service to
        // contact.
        buildConfigField("String", "SYSTEM_SERVICE_PACKAGE", "\"org.wso2.iot.system.service\"")

        //Data publishing related configurations.
        // LOG_PUBLISHER_IN_USE: By default DAS_PUBLISHER or SPLUNK_PUBLISHER are the allowed
        // values. This specifies the log publisher to be used. This can be extended to write
        // custom publishers.
        buildConfigField("String", "LOG_PUBLISHER_IN_USE", "\"<SET_PUBLISHER>\"")
        // LOG_LEVEL: When publishing log cat output to server, the log level tobe used.
        buildConfigField("String", "LOG_LEVEL", "\"*:W\"")
        // NUMBER_OF_LOG_LINES: Number of log lines to be sent.
        buildConfigField("int", "NUMBER_OF_LOG_LINES", "500")
        //Splunk related configurations
        buildConfigField("String", "SPLUNK_API_KEY", "\"<SET_PUBLISHER>\"")
        // HEC_TOKEN: Allowed values are MINT or HTTP
        buildConfigField("String", "SPLUNK_DATA_COLLECTOR_TYPE", "\"MINT\"")
        buildConfigField("String", "HEC_TOKEN", "\"<SPLUNK_HEC_TOKEN>\"")
        buildConfigField("String", "HEC_MINT_ENDPOINT_URL", "\"<SPLUNK_HEC_MINT_ENDPOINT_URL>\"")
        //Event publishing related configurations.
        // If set to true, registered events will be published to DAS. There are two event
        // publisher available by default and custom event types can be written and published
        // with the provided extension points.
        buildConfigField("boolean", "EVENT_LISTENING_ENABLED", "false")
        // Listening to application state changes such as an app getting installed, uninstalled,
        // upgraded and data cleared. If set to true, events will be published.
        buildConfigField("boolean", "APPLICATION_STATE_LISTENER", "false")
        // This is to listen to Runtime information such as CPU. If set to true,
        // events will be published.
        buildConfigField("boolean", "RUNTIME_STATE_LISTENER", "false")
        // The time the alarm should first go off, in milliseconds.
        buildConfigField("int", "DEFAULT_START_TIME", "10000")
        // The interval between subsequent repeats of the alarm, in milliseconds.
        buildConfigField("int", "DEFAULT_INTERVAL", "300000")
        // The interval between subsequent repeats of the alarm, in milliseconds under FCM.
        // The default value is 600000.
        buildConfigField("int", "DEFAULT_FCM_INTERVAL", "600000")
        // Enable background pull notifications strategy in order to fallback from FCM
        // when there a FCM outage.
        buildConfigField("boolean", "FCM_FALLBACK_PULL_ENABLED", "true")
        buildConfigField("int", "DEFAULT_LISTENER_CODE", "10001")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "android-agent-${variant.name}-${variant.versionName}.apk"
                }
            }
            // DEBUG_MODE_ENABLED: Make the agent print the debug logs.
            buildConfigField("boolean", "DEBUG_MODE_ENABLED", "false")
            // Under COSU mode, this will enable an area in the screen to exit from screen pinned
            // mode. This MUST be set to false in production, if COSU is used.
            buildConfigField("boolean", "COSU_SECRET_EXIT", "true")
        }
        debug {
            debuggable true
            signingConfig signingConfigs.debug

            // DEBUG_MODE_ENABLED: Make the agent print the debug logs.
            // Make this false in production.
            buildConfigField("boolean", "DEBUG_MODE_ENABLED", "true")
            // Under COSU mode, this will enable an area in the screen to exit from screen pinned
            // mode. This MUST be set to false in production, if COSU is used.
            buildConfigField("boolean", "COSU_SECRET_EXIT", "false")
        }
    }

    // Since Gradle plugin version 3.0 every product flavor needs a flavor dimension
    flavorDimensions "app", "enrollment", "type"
    productFlavors {
        cloud {
            dimension "app"
            // Protocol used to communicate with the server. Valid values are http:// or https://
            buildConfigField("String", "SERVER_PROTOCOL", "\"https://\"")
            buildConfigField("String", "API_SERVER_PORT", "\"443\"")
            //DEFAULT_HOST - Hardcode the server host to avoid having the user type it during
            //enrollment. If the user must type the hostname/IP during enrollment, leave it as null.
            buildConfigField("String", "DEFAULT_HOST", "\"https://gateway.api.cloud.wso2.com\"")
            // APP_MANAGER_HOST: If the App store host is different from the DEFAULT_HOST
            // change this value.
            buildConfigField("String", "APP_MANAGER_HOST", "null")
            // CLOUD_MANAGER: If the App is pointed to cloud use cloud management host to resolve
            // tenants of user. Otherwise set this to null
            buildConfigField("String", "CLOUD_MANAGER", "\"https://cloudmgt.cloud.wso2.com/cloudmgt\"")
            // SIGN_UP_URL: Set self registration link to sign up
            buildConfigField("String", "SIGN_UP_URL", "\"http://wso2.com/iot/cloud/\"")
            //Show notification to enable location if it is disabled
            buildConfigField("boolean", "ASK_TO_ENABLE_LOCATION", "false")
            //Publish location changes to server
            buildConfigField("boolean", "LOCATION_PUBLISHING_ENABLED", "false")
            //Collect WiFi scan results
            buildConfigField("boolean", "WIFI_SCANNING_ENABLED", "false")
        }
        cloudStaging {
            dimension "app"
            // Protocol used to communicate with the server. Valid values are http:// or https://
            buildConfigField("String", "SERVER_PROTOCOL", "\"https://\"")
            buildConfigField("String", "API_SERVER_PORT", "\"8243\"")
            //DEFAULT_HOST - Hardcode the server host to avoid having the user type it during
            //enrollment. If the user must type the hostname/IP during enrollment, leave it as null.
            buildConfigField("String", "DEFAULT_HOST", "\"https://gateway.api.cloudstaging.wso2.com\"")
            // APP_MANAGER_HOST: If the App store host is different from the DEFAULT_HOST
            // change this value.
            buildConfigField("String", "APP_MANAGER_HOST", "null")
            // CLOUD_MANAGER: If the App is pointed to cloud use cloud management host to resolve
            // tenants of user. Otherwise set this to null
            buildConfigField("String", "CLOUD_MANAGER", "\"https://cloudmgt.cloudstaging.wso2.com/cloudmgt\"")
            // SIGN_UP_URL: Set self registration link to sign up
            buildConfigField("String", "SIGN_UP_URL", "\"http://wso2.com/iot/cloud/\"")
            //Show notification to enable location if it is disabled
            buildConfigField("boolean", "ASK_TO_ENABLE_LOCATION", "false")
            //Publish location changes to server
            buildConfigField("boolean", "LOCATION_PUBLISHING_ENABLED", "false")
            //Collect WiFi scan results
            buildConfigField("boolean", "WIFI_SCANNING_ENABLED", "false")
        }
        standalone {
            dimension "app"
            // Protocol used to communicate with the server. Valid values are http:// or https://
            buildConfigField("String", "SERVER_PROTOCOL", "\"http://\"")
            buildConfigField("String", "API_SERVER_PORT", "\"80\"")
            //DEFAULT_HOST - Hardcode the server host to avoid having the user type it during
            //enrollment. If the user must type the hostname/IP during enrollment, leave it as null.
            buildConfigField("String", "DEFAULT_HOST", "null")
            // APP_MANAGER_HOST: If the App store host is different from the DEFAULT_HOST
            // change this value.
            buildConfigField("String", "APP_MANAGER_HOST", "null")
            // CLOUD_MANAGER: If the App is pointed to cloud use cloud management host to resolve
            // tenants of user. Otherwise set this to null
            buildConfigField("String", "CLOUD_MANAGER", "null")
            // SIGN_UP_URL: Set self registration link to sign up
            buildConfigField("String", "SIGN_UP_URL", "null")
            //Show notification to enable location if it is disabled
            buildConfigField("boolean", "ASK_TO_ENABLE_LOCATION", "false")
            //Publish location changes to server
            buildConfigField("boolean", "LOCATION_PUBLISHING_ENABLED", "false")
            //Collect WiFi scan results
            buildConfigField("boolean", "WIFI_SCANNING_ENABLED", "true")

            // Provide fallback for :iDPProxy library
            matchingFallbacks = ['standalone']
        }
        autoEnrollmentEnabled {
            dimension "enrollment"
            // Auto enrollment specific configurations
            // AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED: This is to specify if the enrollment
            // will be done in a background service. This is typically related to mutual SSL based
            // enrollments only.
            buildConfigField("boolean", "AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED", "true")
            // SKIP_LICENSE: Skip displaying the license policy during enrollment.
            // This is recommended to be used in conjunction with
            // AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED
            buildConfigField("boolean", "SKIP_LICENSE", "true")
            // HIDE_LOGIN_UI: Skip displaying the login screen during enrollment.
            // This is recommended to be used in conjunction with
            // AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED
            buildConfigField("boolean", "HIDE_LOGIN_UI", "true")
            // SKIP_WORK_PROFILE_CREATION: This will hide the work profile creation step from the
            // user. This is recommended to be used in conjunction with
            // AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED
            buildConfigField("boolean", "SKIP_WORK_PROFILE_CREATION", "true")
            // HIDE_ERROR_DIALOG: If this is set to true, agent will not show any error messages.
            // This is only recommended to use when the enrollment happens in background, and no
            // user interaction is needed. i.e in conjunction with
            // AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED
            buildConfigField("boolean", "HIDE_ERROR_DIALOG", "true")
        }
        autoEnrollmentDisabled {
            dimension "enrollment"
            // Auto enrollment specific configurations
            // AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED: This is to specify if the enrollment
            // will be done in a background service. This is typically related to mutual SSL based
            // enrollments only.
            buildConfigField("boolean", "AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED", "false")
            // SKIP_LICENSE: Skip displaying the license policy during enrollment.
            // This is recommended to be used in conjunction with
            // AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED
            buildConfigField("boolean", "SKIP_LICENSE", "true")
            // HIDE_LOGIN_UI: Skip displaying the login screen during enrollment.
            // This is recommended to be used in conjunction with
            // AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED
            buildConfigField("boolean", "HIDE_LOGIN_UI", "false")
            // SKIP_WORK_PROFILE_CREATION: This will hide the work profile creation step from the
            // user. This is recommended to be used in conjunction with
            // AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED
            buildConfigField("boolean", "SKIP_WORK_PROFILE_CREATION", "true")
            // HIDE_ERROR_DIALOG: If this is set to true, agent will not show any error messages.
            // This is only recommended to use when the enrollment happens in background, and no
            // user interaction is needed. i.e in conjunction with
            // AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED
            buildConfigField("boolean", "HIDE_ERROR_DIALOG", "false")
        }
        BYOD {
            dimension "type"
            // Set DEFAULT_OWNERSHIP to null if no overriding is needed. Other possible values are,
            // BYOD or COPE. If you are using the mutual SSL authentication
            // This value must be set to a value other than null.
            buildConfigField("String", "DEFAULT_OWNERSHIP", "\"BYOD\"")
            // System service specific configurations.
            // SYSTEM_APP_ENABLED: This is to set if the system app will also be installed.
            // If this is set org.wso2.iot.system.service must also be available in the device.
            buildConfigField("boolean", "SYSTEM_APP_ENABLED", "false")
        }
        COPE {
            dimension "type"
            // Set DEFAULT_OWNERSHIP to null if no overriding is needed. Other possible values are,
            // BYOD or COPE. If you are using the mutual SSL authentication
            // This value must be set to a value other than null.
            buildConfigField("String", "DEFAULT_OWNERSHIP", "\"COPE\"")
            // System service specific configurations.
            // SYSTEM_APP_ENABLED: This is to set if the system app will also be installed.
            // If this is set org.wso2.iot.system.service must also be available in the device.
            buildConfigField("boolean", "SYSTEM_APP_ENABLED", "true")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

task checkAPIVersion(dependsOn: build) {
    android.buildTypes.all { buildType ->
        if (buildType.buildConfigFields["SERVER_API_VERSION"] != null) {
            def minServerAPIVersion = buildType.buildConfigFields["MIN_SERVER_API_VERSION"].value.toFloat()
            def maxServerAPIVersion = buildType.buildConfigFields["MAX_SERVER_API_VERSION"].value.toFloat()
            def serverAPIVersion = buildType.buildConfigFields["SERVER_API_VERSION"].value.toFloat()
            if (minServerAPIVersion > serverAPIVersion ||
                    maxServerAPIVersion < serverAPIVersion) {
                throw new GradleException("Server API version should be between " + minServerAPIVersion +
                        " and " + maxServerAPIVersion)
            }
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'org.apache.ftpserver:ftpserver-core:1.1.1'
    androidTestImplementation 'org.apache.sshd:sshd-sftp:0.11.0'
    androidTestImplementation 'org.apache.ftpserver:ftplet-api:1.1.1'
    androidTestImplementation 'com.android.support:support-annotations:27.1.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation project(':iDPProxy')
    compile('com.googlecode.json-simple:json-simple:1.1.1') {
        exclude module: 'junit'
    }
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'com.android.support:design:27.1.0'
    implementation 'commons-io:commons-io:2.5'
    implementation 'com.google.android.gms:play-services-base:11.8.0'
    implementation "com.google.android.gms:play-services-location:11.8.0"
    implementation 'com.google.firebase:firebase-core:11.8.0'
    implementation 'com.google.firebase:firebase-messaging:11.8.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.6.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.6.4'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.6.4'
    implementation 'org.bouncycastle:bcprov-jdk16:1.46'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'com.splunk.mint:mint:5.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.jcraft:jsch:0.1.54'
    implementation 'commons-net:commons-net:3.3'
    implementation "org.java-websocket:Java-WebSocket:1.3.0"
}

apply plugin: 'com.google.gms.google-services'


